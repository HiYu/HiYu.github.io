<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-fanruo.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-fanruo.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha256-HtsXJanqjKTc8vVQjO4YMhiqFoXkfBsjBWcX91T1jr8=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"m.fanruo.net","root":"/","images":"/images","scheme":"Pisces","darkmode":false,"version":"8.16.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":false,"style":null},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"stickytabs":false,"motion":{"enable":true,"async":false,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"}}</script><script src="/js/config.js"></script>

    <meta name="description" content="lua 是一门极其精简的语言，内置类型只要nil,boolean,number等三种基本类型，以及string,table等二种组合类型。没有C&#x2F;C++ 等语言中的class、struct等复杂类型，这些类型可以通过table来实现。同时，不同于其他语言（如C&#x2F;C++和java），function在lua中也作为一个一级类型。">
<meta property="og:type" content="article">
<meta property="og:title" content="2.2 lua 基础数据类型">
<meta property="og:url" content="https://m.fanruo.net/2-2-lua-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">
<meta property="og:site_name" content="凡 若">
<meta property="og:description" content="lua 是一门极其精简的语言，内置类型只要nil,boolean,number等三种基本类型，以及string,table等二种组合类型。没有C&#x2F;C++ 等语言中的class、struct等复杂类型，这些类型可以通过table来实现。同时，不同于其他语言（如C&#x2F;C++和java），function在lua中也作为一个一级类型。">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2019-05-19T15:39:48.000Z">
<meta property="article:modified_time" content="2022-05-07T04:03:27.392Z">
<meta property="article:author" content="闲余">
<meta property="article:tag" content="lua">
<meta property="article:tag" content="语言">
<meta name="twitter:card" content="summary">


<link rel="canonical" href="https://m.fanruo.net/2-2-lua-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":true,"permalink":"https://m.fanruo.net/2-2-lua-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","path":"/2-2-lua-基础数据类型","title":"2.2 lua 基础数据类型"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>2.2 lua 基础数据类型 | 凡 若</title>
  








  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">凡 若</p>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">初心 读书 知新 生活</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="搜索" role="button">
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="home fa-fw"></i>首页</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="th fa-fw"></i>分类</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="tags fa-fw"></i>标签</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="archive fa-fw"></i>归档</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="user fa-fw"></i>关于</a></li>
  </ul>
</nav>




</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#nil"><span class="nav-number">1.</span> <span class="nav-text">nil</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#boolean"><span class="nav-number">2.</span> <span class="nav-text">boolean</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#number"><span class="nav-number">3.</span> <span class="nav-text">number</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#string"><span class="nav-number">4.</span> <span class="nav-text">string</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#table"><span class="nav-number">5.</span> <span class="nav-text">table</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#function"><span class="nav-number">6.</span> <span class="nav-text">function</span></a></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">闲余</p>
  <div class="site-description" itemprop="description">初心 读书 知新 生活</div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">57</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
          <a href="/categories/">
        <span class="site-state-item-count">8</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">35</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <a href="https://github.com/HiYu" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;HiYu" rel="noopener me" target="_blank"><i class="fab fa-github fa-fw"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:zhaoyyuu@gmail.com" title="E-Mail → mailto:zhaoyyuu@gmail.com" rel="noopener me" target="_blank"><i class="fa fa-envelope fa-fw"></i>E-Mail</a>
      </span>
  </div>

        </div>
      </div>
     <div class="wechat_channel">
        <br>
        <!-- 这里添加你的二维码图片 -->
        <img src ="/images/wechat.png">
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://m.fanruo.net/2-2-lua-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="闲余">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="凡 若">
      <meta itemprop="description" content="初心 读书 知新 生活">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="2.2 lua 基础数据类型 | 凡 若">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          2.2 lua 基础数据类型
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2019-05-19 23:39:48" itemprop="dateCreated datePublished" datetime="2019-05-19T23:39:48+08:00">2019-05-19</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">更新于</span>
      <time title="修改时间：2022-05-07 12:03:27" itemprop="dateModified" datetime="2022-05-07T12:03:27+08:00">2022-05-07</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分类于</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/lua/" itemprop="url" rel="index"><span itemprop="name">lua</span></a>
        </span>
    </span>

  
    <span class="post-meta-break"></span>
    <span class="post-meta-item" title="本文字数">
      <span class="post-meta-item-icon">
        <i class="far fa-file-word"></i>
      </span>
      <span class="post-meta-item-text">本文字数：</span>
      <span>3.6k</span>
    </span>
    <span class="post-meta-item" title="阅读时长">
      <span class="post-meta-item-icon">
        <i class="far fa-clock"></i>
      </span>
      <span class="post-meta-item-text">阅读时长 &asymp;</span>
      <span>3 分钟</span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><p>lua 是一门极其精简的语言，内置类型只要<code>nil</code>,<code>boolean</code>,<code>number</code>等三种基本类型，以及<code>string</code>,<code>table</code>等二种组合类型。没有C&#x2F;C++ 等语言中的<code>class</code>、<code>struct</code>等复杂类型，这些类型可以通过<code>table</code>来实现。同时，不同于其他语言（如C&#x2F;C++和java），<code>function</code>在lua中也作为一个一级类型。</p>
<span id="more"></span> 
<h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p><code>nil</code> 是一种类型，Lua 将 <code>nil</code> 用于表示“无效值”。</p>
<ol>
<li>一个变量在第一次赋值前的默认值是 <code>nil</code></li>
<li>将<code>nil</code> 赋予给一个全局变量就等同于删除它.</li>
<li>openresty 中提供了另一种表示空值的类型<code>ngx.null</code>.</li>
</ol>
<p><code>nil</code>在lua中有其特殊意义，如果一个变量被设置为<code>nil</code>，就等于说该变量<strong>未定义</strong>，与无穷无尽的其他未定义的变量一样。那么，如果把redis查询为空的结果设置为<code>nil</code>，就无法把”查询为空”和“未定义”区分开来了，例如在一个table中，一个key对应一个value，如果将该value设置为<code>nil</code>，则相当让key凭空消失，这显然是不合理的。所以必须用一个userdata类型的独特的值来表示这种查询为空，但又不等同于未定义的变量，例如<code>ngx.null</code>。同样的情况想必在sql的lua模块中也会出现，用来处理记录中键值查询为空的情况。<br>lua中神奇的<code>nil</code>了。<code>nil</code>是一种类型，该类型只有一个值，这个值就是<code>nil</code>。该值的作用只有一个，表示一个变量不存在。跟C\C++等常规语言不同，”不存在“跟空、0完全是两个概念。在C语言中，一个字符串如果为空，那么它就只有一个为<code>0</code>的<code>\nul</code>结束符，如果对齐进行逻辑判断，则是假。但lua中，只要一个变量不是<code>nil</code>类型或者是boolean类型中的<code>false</code>,则对它进行逻辑判断，结果是真，即使该值是一个数字0，或者是一个空字符串。</p>
<h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h2><p>布尔类型，可选值 true&#x2F;false；<strong>Lua 中 nil 和 false 为“假”</strong>，其它所有值均为“真”。比如 0 和空字符串就是“真”；C 或者 Perl 程序员或许会对此感到惊讶。</p>
<h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><p>Number 类型用于表示实数，和 C&#x2F;C++ 里面的 <code>double</code> 类型很类似。可以使用数学函数<code>math.floor</code>（ 向下取整） 和 <code>math.ceil</code>（ 向上取整） 进行取整操作。</p>
<p>一般地，Lua 的 number 类型就是用双精度浮点数来实现的。值得一提的是，LuaJIT 支持所谓的“dual-number”（ 双数） 模式，即 LuaJIT 会根据上下文用整型来存储整数，而用双精度浮点数来存放浮点数。另外，LuaJIT 还支持“长长整型”的大整数（ 在 x86_64 体系结构上则是 64 位整数） 。例如</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">print</span>(9223372036854775807LL - 1)</span></span><br><span class="line">9223372036854775806LL</span><br></pre></td></tr></table></figure>

<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>Lua 中有三种方式表示字符串:</p>
<ol>
<li>使用一对匹配的单引号。例：’hello’。</li>
<li>使用一对匹配的双引号。例：”hello”。</li>
<li>字符串还可以用一种长括号（ 即[[ ]]） 括起来的方式定义。我们把两个正的方括号（ 即[[）间插入 n 个等号定义为第 n 级正长括号。就是说，0 级正的长括号写作 [[ ，一级正的长括号写作 [&#x3D;[，如此等等。反的长括号也作类似定义；举个例子，4 级反的长括号写作]&#x3D;&#x3D;&#x3D;&#x3D;]。一个长字符串可以由任何一级的正的长括号开始，而由第一个碰到的同级反的长括号结束。整个词法分析过程将不受分行限制，不处理任何转义符，并且忽略掉任何不同级别的长括号。这种方式描述的字符串可以包含任何东西，当然本级别的反长括号除外。例：[[abc\nbc]]，里面的 “\n” 不会被转义。</li>
</ol>
<p><strong>特别注意：</strong>Lua 的字符串是<em>不可改变</em>的值，不能像在 c 语言中那样直接修改字符串的某个字符，而是根据修改要求来创建一个新的字符串。Lua 也<em>不能</em>通过下标来访问字符串的某个字符。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">local</span> str1 = <span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">local</span> str2 = <span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">local</span> str3 = [[<span class="string">&quot;add\name&quot;</span>,<span class="string">&#x27;hello&#x27;</span>]]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">local</span> str4 = [=[string have a [[]].]=]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">local</span> str5 = <span class="string">&#x27;hello\nworld&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">local</span> str6 = <span class="string">&quot;hello\nworld&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">print</span>(str1)</span></span><br><span class="line">hello world</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">print</span>(str2)</span></span><br><span class="line">hello world</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">print</span>(str3)</span></span><br><span class="line">&quot;add\name&quot;,&#x27;hello&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">print</span>(str4)</span></span><br><span class="line">string have a [[]]</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">print</span>(str5)</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">print</span>(str6)</span></span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<p><strong>特别注意：</strong> 从上面实例<code>str5</code>和<code>str6</code>可以看出<code>&#39;</code>和<code>&quot;</code>在lua中作用是一致的，二者中的<code>\n</code>这类转义字符都会被转义，这一点要区别一下shell中<code>&#39;</code>和<code>&quot;</code>。</p>
<p>在 Lua 实现中，Lua 字符串一般都会经历一个“内化”（ intern） 的过程，即两个完全一样的Lua 字符串在 Lua 虚拟机中只会存储一份。每一个 Lua 字符串在创建时都会插入到 Lua 虚拟机内部的一个全局的哈希表中。 这意味着</p>
<ol>
<li>创建相同的 Lua 字符串并不会引入新的动态内存分配操作，所以相对便宜（ 但仍有全局哈希表查询的开销。</li>
<li>内容相同的 Lua 字符串不会占用多份存储空间。</li>
<li>已经创建好的 Lua 字符串之间进行相等性比较时是 O(1) 时间度的开销，而不是通常见到的 O(n)，比较索引就可以了。</li>
</ol>
<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>Table 类型实现了一种抽象的“关联数组”。“关联数组”是一种具有特殊索引方式的数组，索引通常是字符串（ string） 或者 number 类型，但也可以是除 nil 以外的任意类型的值。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> corp = &#123;</span><br><span class="line">web = <span class="string">&quot;www.google.com&quot;</span>, <span class="comment">--索引为字符串，key = &quot;web&quot;,</span></span><br><span class="line"><span class="comment">-- value = &quot;www.google.com&quot;</span></span><br><span class="line">telephone = <span class="string">&quot;12345678&quot;</span>, <span class="comment">--索引为字符串</span></span><br><span class="line">staff = &#123;<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Scott&quot;</span>, <span class="string">&quot;Gary&quot;</span>&#125;, <span class="comment">--索引为字符串，值也是一个表</span></span><br><span class="line"><span class="number">100876</span>, <span class="comment">--相当于 [1] = 100876，此时索引为数字</span></span><br><span class="line"><span class="comment">-- key = 1, value = 100876</span></span><br><span class="line"><span class="number">100191</span>, <span class="comment">--相当于 [2] = 100191，此时索引为数字</span></span><br><span class="line">[<span class="number">10</span>] = <span class="number">360</span>, <span class="comment">--直接把数字索引给出</span></span><br><span class="line">[<span class="string">&quot;city&quot;</span>] = <span class="string">&quot;Beijing&quot;</span> <span class="comment">--索引为字符串</span></span><br><span class="line">&#125; p</span><br><span class="line">rint(corp.web) <span class="comment">--&gt;output:www.google.com</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="string">&quot;telephone&quot;</span>]) <span class="comment">--&gt;output:12345678</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="number">2</span>]) <span class="comment">--&gt;output:100191</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="string">&quot;city&quot;</span>]) <span class="comment">--&gt;output:&quot;Beijing&quot;</span></span><br><span class="line"><span class="built_in">print</span>(corp.staff[<span class="number">1</span>]) <span class="comment">--&gt;output:Jack</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="number">10</span>]) <span class="comment">--&gt;output:360</span></span><br></pre></td></tr></table></figure>

<p>在内部实现上，table 通常实现为一个哈希表、一个数组、或者两者的混合。具体的实现为何种形式，动态依赖于具体的 table 的键分布特点。</p>
<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>在 Lua 中，函数:</p>
<ol>
<li>也是一种数据类型,</li>
<li>函数可以存储在变量中，</li>
<li>可以通过参数传递给其他函数，</li>
<li>还可以作为其他函数的返回值</li>
</ol>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;in the function&quot;</span>)</span><br><span class="line"><span class="comment">--dosomething()</span></span><br><span class="line"><span class="keyword">local</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> y = <span class="number">20</span></span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> a = foo <span class="comment">--把函数赋给变量</span></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line"><span class="comment">--output:</span></span><br><span class="line"><span class="keyword">in</span> the <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">30</span></span><br></pre></td></tr></table></figure>
<p>有名函数的定义可以理解为是匿名函数对变量的赋值。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>可以写成如下形式：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>类似地，</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

    </div>

    
    
    

    <footer class="post-footer">
          

<div class="post-copyright">
<ul>
  <li class="post-copyright-author">
      <strong>本文作者： </strong>闲余
  </li>
  <li class="post-copyright-link">
      <strong>本文链接：</strong>
      <a href="https://m.fanruo.net/2-2-lua-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" title="2.2 lua 基础数据类型">https://m.fanruo.net/2-2-lua-基础数据类型</a>
  </li>
  <li class="post-copyright-license">
      <strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" rel="noopener" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-ND</a> 许可协议。转载请注明出处！
  </li>
</ul>
</div>

          <div class="post-tags">
              <a href="/tags/lua/" rel="tag"># lua</a>
              <a href="/tags/%E8%AF%AD%E8%A8%80/" rel="tag"># 语言</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/2-1-lua-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" rel="prev" title="2.1 lua 基本语法">
                  <i class="fa fa-chevron-left"></i> 2.1 lua 基本语法
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/2-3-lua-%E8%A1%A8%E8%BE%BE%E5%BC%8F" rel="next" title="2.3 lua 表达式">
                  2.3 lua 表达式 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






    <div class="comments gitalk-container"></div>
</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">


<div class="copyright">
  &copy; 
  <span itemprop="copyrightYear">2023</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">闲余</span>
</div>
<div class="wordcount">
  <span class="post-meta-item">
    <span class="post-meta-item-icon">
      <i class="fa fa-chart-line"></i>
    </span>
    <span title="站点总字数">116k</span>
  </span>
  <span class="post-meta-item">
    <span class="post-meta-item-icon">
      <i class="fa fa-coffee"></i>
    </span>
    <span title="站点阅读时长">1:46</span>
  </span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a> & <a href="https://theme-next.js.org/pisces/" rel="noopener" target="_blank">NexT.Pisces</a> 强力驱动
  </div>

    </div>
  </footer>

  
  <div class="back-to-top" role="button" aria-label="返回顶部">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/next-boot.js"></script>

  





  




<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.css" integrity="sha256-AJnUHL7dBv6PGaeyPQJcgQPDjt/Hn/PvYZde1iqfp8U=" crossorigin="anonymous">

<script class="next-config" data-name="gitalk" type="application/json">{"enable":true,"github_id":"HiYu","repo":"HiYu.github.io","client_id":"f2b3a11984c32f7b9148","client_secret":"455bc8ef7a292a46b430a5d965652175b57eaced","admin_user":"HiYu","distraction_free_mode":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token","language":"en | es-ES | fr | ru | zh-CN | zh-TW","js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.min.js","integrity":"sha256-MVK9MGD/XJaGyIghSVrONSnoXoGh3IFxLw0zfvzpxR4="},"path_md5":"7c4035ab691bcb6762a845d561a61524"}</script>
<script src="/js/third-party/comments/gitalk.js"></script>

</body>
</html>
