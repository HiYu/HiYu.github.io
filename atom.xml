<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凡 若</title>
  
  <subtitle>初心 读书 知新 生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.fanruo.net/"/>
  <updated>2019-05-19T15:45:34.653Z</updated>
  <id>http://blog.fanruo.net/</id>
  
  <author>
    <name>Frank Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2.3 lua 表达式</title>
    <link href="http://blog.fanruo.net/2019/05/19/2-3-lua-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.fanruo.net/2019/05/19/2-3-lua-表达式/</id>
    <published>2019-05-19T15:44:58.000Z</published>
    <updated>2019-05-19T15:45:34.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h2><p>Lua 的算术运算符如下表所示：<br>|表达符|备注|<br>|–|—|<br>|+ |加法|<br>|- |减法|<br>|* |乘法|<br>|/ |除法|<br>|^ |指数|<br>|%| 取模|</p><p>实例<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="number">2</span>) <span class="comment">--&gt;打印 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> / <span class="number">10</span>) <span class="comment">--&gt;打印 0.5。 这是Lua不同于c语言的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5.0</span> / <span class="number">10</span>) <span class="comment">--&gt;打印 0.5。 浮点数相除的结果是浮点数</span></span><br><span class="line"><span class="comment">-- print(10 / 0) --&gt;注意除数不能为0，计算的结果会出错</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ^ <span class="number">10</span>) <span class="comment">--&gt;打印 1024。 求2的10次方</span></span><br><span class="line"><span class="keyword">local</span> num = <span class="number">1357</span></span><br><span class="line"><span class="built_in">print</span>(num % <span class="number">2</span>) <span class="comment">--&gt;打印 1</span></span><br><span class="line"><span class="built_in">print</span>((num % <span class="number">2</span>) == <span class="number">1</span>) <span class="comment">--&gt;打印 true。 判断num是否为奇数</span></span><br><span class="line"><span class="built_in">print</span>((num % <span class="number">5</span>) == <span class="number">0</span>) <span class="comment">--&gt;打印 false。判断num是否能被5整数</span></span><br></pre></td></tr></table></figure></p><h2 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h2><table><thead><tr><th>表达符</th><th>备注</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>~=</td><td>不等于</td></tr></tbody></table><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> &lt; <span class="number">2</span>) <span class="comment">--&gt;打印 true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> == <span class="number">2</span>) <span class="comment">--&gt;打印 false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> ~= <span class="number">2</span>) <span class="comment">--&gt;打印 true</span></span><br><span class="line"><span class="keyword">local</span> a, b = <span class="literal">true</span>, <span class="literal">false</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">--&gt;打印 false</span></span><br></pre></td></tr></table></figure><p><strong>特别注意：</strong></p><ol><li>不同于C/C++等语言，lua中的“不等于”是<code>~=</code>而非<code>!=</code>.</li><li>由于 Lua 字符串总是会被“内化”，即相同内容的字符串只会被保存一份，因此 Lua 字符串之间的相等性比较可以简化为其内部存储地址的比较。这意味着 Lua 字符串的相等性比较总是为 O(1). 而在其他编程语言中，字符串的相等性比较则通常为 O(n)，即需要逐个字节（ 或按若干个连续字节） 进行比较。</li><li>在使用“==”做等于判断时，要注意对于 table, userdata 和函数， Lua 是作引用比较的。也就是说，只有当两个变量引用同一个对象时，才认为它们相等。如实例：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = &#123; x = <span class="number">1</span>, y = <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">local</span> b = &#123; x = <span class="number">1</span>, y = <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">if</span> a == b <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a==b"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a~=b"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">---output:</span></span><br><span class="line">a~=b</span><br></pre></td></tr></table></figure></li></ol><h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h2><table><thead><tr><th>表达符</th><th>备注</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td></tr><tr><td>or</td><td>逻辑或</td></tr><tr><td>not</td><td>逻辑非</td></tr></tbody></table><p>Lua 中的 <code>and</code> 和 <code>or</code> 是不同于C/C++语言的。在C/C++语言中，<code>and</code> 和 <code>or</code> 只得到两个值 1 和 0，其中 1表示真，0 表示假。而 Lua 中 <code>and</code>和<code>or</code> 的执行结果返回的表达式的结果，而非<code>true</code>或者<code>flase</code>这类逻辑结果。也就是说：</p><ol><li><code>a and b</code> 如果 a 为 <code>nil</code>，则返回 a，否则返回 b;</li><li><code>a or b</code> 如果 a 为 <code>nil</code>，则返回 b，否则返回 a。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>local c = nil</span><br><span class="line"><span class="meta">&gt;</span>local d = 0</span><br><span class="line"><span class="meta">&gt;</span>local e = 100</span><br><span class="line"><span class="meta">&gt;</span>print(c and d)</span><br><span class="line">nil</span><br><span class="line"><span class="meta">&gt;</span>print(c and e)</span><br><span class="line">nil</span><br><span class="line"><span class="meta">&gt;</span>print(d and e)</span><br><span class="line">100</span><br><span class="line"><span class="meta">&gt;</span>print(c or d)</span><br><span class="line">0</span><br><span class="line"><span class="meta">&gt;</span>print(c or e)</span><br><span class="line">100</span><br><span class="line"><span class="meta">&gt;</span>print(not c)</span><br><span class="line">true</span><br><span class="line"><span class="meta">&gt;</span>print(not d)</span><br><span class="line">false</span><br></pre></td></tr></table></figure></li></ol><p><strong>特别注意：</strong></p><ol><li>所有逻辑操作符将 false 和 nil 视作假，其他任何值视作真；</li><li>对于 and 和 or，“短路求值”；</li><li>对于 not，永远只返回 true 或者 false。</li></ol><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><table><thead><tr><th>优先级(由高到低)</th></tr></thead><tbody><tr><td>^</td></tr><tr><td>not   # -</td></tr><tr><td>*   /   %</td></tr><tr><td>+   -</td></tr><tr><td>..</td></tr><tr><td>&lt; &gt; &lt;=  &gt;=  ==  ~=</td></tr><tr><td>and</td></tr><tr><td>or</td></tr></tbody></table><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">local</span> x, y = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> res = <span class="number">0</span></span><br><span class="line">res = a + i &lt; b/<span class="number">2</span> + <span class="number">1</span> <span class="comment">--&gt;等价于res = (a + i) &lt; ((b/2) + 1)</span></span><br><span class="line">res = <span class="number">5</span> + x^<span class="number">2</span>*<span class="number">8</span> <span class="comment">--&gt;等价于res = 5 + ((x^2) * 8)</span></span><br><span class="line">res = a &lt; y <span class="keyword">and</span> y &lt;=x <span class="comment">--&gt;等价于res = (a &lt; y) and (y &lt;= x)</span></span><br></pre></td></tr></table></figure><p><strong>tips</strong></p><ol><li>若不确定某些操作符的优先级，就应显示地用括号来指定运算顺序。这样做还可以提高代码的可读性。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算术表达式&quot;&gt;&lt;a href=&quot;#算术表达式&quot; class=&quot;headerlink&quot; title=&quot;算术表达式&quot;&gt;&lt;/a&gt;算术表达式&lt;/h2&gt;&lt;p&gt;Lua 的算术运算符如下表所示：&lt;br&gt;|表达符|备注|&lt;br&gt;|–|—|&lt;br&gt;|+ |加法|&lt;br&gt;|- |减法
      
    
    </summary>
    
      <category term="lua" scheme="http://blog.fanruo.net/categories/lua/"/>
    
    
      <category term="lua, 表达式" scheme="http://blog.fanruo.net/tags/lua-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2.2 lua 基础数据类型</title>
    <link href="http://blog.fanruo.net/2019/05/19/2-2-lua-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://blog.fanruo.net/2019/05/19/2-2-lua-基础数据类型/</id>
    <published>2019-05-19T15:39:48.000Z</published>
    <updated>2019-05-19T15:40:20.157Z</updated>
    
    <content type="html"><![CDATA[<p>lua 是一门极其精简的语言，内置类型只要<code>nil</code>,<code>boolean</code>,<code>number</code>等三种基本类型，以及<code>string</code>,<code>table</code>等二种组合类型。没有C/C++ 等语言中的<code>class</code>、<code>struct</code>等复杂类型，这些类型可以通过<code>table</code>来实现。同时，不同于其他语言（如C/C++和java），<code>function</code>在lua中也作为一个一级类型。</p><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p><code>nil</code> 是一种类型，Lua 将 <code>nil</code> 用于表示“无效值”。</p><ol><li>一个变量在第一次赋值前的默认值是 <code>nil</code></li><li>将<code>nil</code> 赋予给一个全局变量就等同于删除它.</li><li>openresty 中提供了另一种表示空值的类型<code>ngx.null</code>.</li></ol><p><code>nil</code>在lua中有其特殊意义，如果一个变量被设置为<code>nil</code>，就等于说该变量<strong>未定义</strong>，与无穷无尽的其他未定义的变量一样。那么，如果把redis查询为空的结果设置为<code>nil</code>，就无法把”查询为空”和“未定义”区分开来了，例如在一个table中，一个key对应一个value，如果将该value设置为<code>nil</code>，则相当让key凭空消失，这显然是不合理的。所以必须用一个userdata类型的独特的值来表示这种查询为空，但又不等同于未定义的变量，例如<code>ngx.null</code>。同样的情况想必在sql的lua模块中也会出现，用来处理记录中键值查询为空的情况。<br>lua中神奇的<code>nil</code>了。<code>nil</code>是一种类型，该类型只有一个值，这个值就是<code>nil</code>。该值的作用只有一个，表示一个变量不存在。跟C\C++等常规语言不同，”不存在“跟空、0完全是两个概念。在C语言中，一个字符串如果为空，那么它就只有一个为<code>0</code>的<code>\nul</code>结束符，如果对齐进行逻辑判断，则是假。但lua中，只要一个变量不是<code>nil</code>类型或者是boolean类型中的<code>false</code>,则对它进行逻辑判断，结果是真，即使该值是一个数字0，或者是一个空字符串。</p><h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h2><p>布尔类型，可选值 true/false；<strong>Lua 中 nil 和 false 为“假”</strong>，其它所有值均为“真”。比如 0 和空字符串就是“真”；C 或者 Perl 程序员或许会对此感到惊讶。</p><h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><p>Number 类型用于表示实数，和 C/C++ 里面的 <code>double</code> 类型很类似。可以使用数学函数<code>math.floor</code>（ 向下取整） 和 <code>math.ceil</code>（ 向上取整） 进行取整操作。</p><p>一般地，Lua 的 number 类型就是用双精度浮点数来实现的。值得一提的是，LuaJIT 支持所谓的“dual-number”（ 双数） 模式，即 LuaJIT 会根据上下文用整型来存储整数，而用双精度浮点数来存放浮点数。另外，LuaJIT 还支持“长长整型”的大整数（ 在 x86_64 体系结构上则是 64 位整数） 。例如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>print(9223372036854775807LL - 1)</span><br><span class="line">9223372036854775806LL</span><br></pre></td></tr></table></figure></p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>Lua 中有三种方式表示字符串:</p><ol><li>使用一对匹配的单引号。例：’hello’。</li><li>使用一对匹配的双引号。例：”hello”。</li><li>字符串还可以用一种长括号（ 即[[ ]]） 括起来的方式定义。我们把两个正的方括号（ 即[[）间插入 n 个等号定义为第 n 级正长括号。就是说，0 级正的长括号写作 [[ ，一级正的长括号写作 [=[，如此等等。反的长括号也作类似定义；举个例子，4 级反的长括号写作]====]。一个长字符串可以由任何一级的正的长括号开始，而由第一个碰到的同级反的长括号结束。整个词法分析过程将不受分行限制，不处理任何转义符，并且忽略掉任何不同级别的长括号。这种方式描述的字符串可以包含任何东西，当然本级别的反长括号除外。例：[[abc\nbc]]，里面的 “\n” 不会被转义。</li></ol><p><strong>特别注意：</strong>Lua 的字符串是<em>不可改变</em>的值，不能像在 c 语言中那样直接修改字符串的某个字符，而是根据修改要求来创建一个新的字符串。Lua 也<em>不能</em>通过下标来访问字符串的某个字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>local str1 = 'hello world'</span><br><span class="line"><span class="meta">&gt;</span>local str2 = "hello world"</span><br><span class="line"><span class="meta">&gt;</span>local str3 = [["add\name",'hello']]</span><br><span class="line"><span class="meta">&gt;</span>local str4 = [=[string have a [[]].]=]</span><br><span class="line"><span class="meta">&gt;</span>local str5 = 'hello\nworld'</span><br><span class="line"><span class="meta">&gt;</span>local str6 = "hello\nworld"</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span>print(str1)</span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;</span>print(str2)</span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;</span>print(str3)</span><br><span class="line">"add\name",'hello'</span><br><span class="line"><span class="meta">&gt;</span>print(str4)</span><br><span class="line">string have a [[]]</span><br><span class="line"><span class="meta">&gt;</span>print(str5)</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"><span class="meta">&gt;</span>print(str6)</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p><strong>特别注意：</strong> 从上面实例<code>str5</code>和<code>str6</code>可以看出<code>&#39;</code>和<code>&quot;</code>在lua中作用是一致的，二者中的<code>\n</code>这类转义字符都会被转义，这一点要区别一下shell中<code>&#39;</code>和<code>&quot;</code>。</p><p>在 Lua 实现中，Lua 字符串一般都会经历一个“内化”（ intern） 的过程，即两个完全一样的Lua 字符串在 Lua 虚拟机中只会存储一份。每一个 Lua 字符串在创建时都会插入到 Lua 虚拟机内部的一个全局的哈希表中。 这意味着</p><ol><li>创建相同的 Lua 字符串并不会引入新的动态内存分配操作，所以相对便宜（ 但仍有全局哈希表查询的开销。</li><li>内容相同的 Lua 字符串不会占用多份存储空间。</li><li>已经创建好的 Lua 字符串之间进行相等性比较时是 O(1) 时间度的开销，而不是通常见到的 O(n)，比较索引就可以了。</li></ol><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>Table 类型实现了一种抽象的“关联数组”。“关联数组”是一种具有特殊索引方式的数组，索引通常是字符串（ string） 或者 number 类型，但也可以是除 nil 以外的任意类型的值。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> corp = &#123;</span><br><span class="line">web = <span class="string">"www.google.com"</span>, <span class="comment">--索引为字符串，key = "web",</span></span><br><span class="line"><span class="comment">-- value = "www.google.com"</span></span><br><span class="line">telephone = <span class="string">"12345678"</span>, <span class="comment">--索引为字符串</span></span><br><span class="line">staff = &#123;<span class="string">"Jack"</span>, <span class="string">"Scott"</span>, <span class="string">"Gary"</span>&#125;, <span class="comment">--索引为字符串，值也是一个表</span></span><br><span class="line"><span class="number">100876</span>, <span class="comment">--相当于 [1] = 100876，此时索引为数字</span></span><br><span class="line"><span class="comment">-- key = 1, value = 100876</span></span><br><span class="line"><span class="number">100191</span>, <span class="comment">--相当于 [2] = 100191，此时索引为数字</span></span><br><span class="line">[<span class="number">10</span>] = <span class="number">360</span>, <span class="comment">--直接把数字索引给出</span></span><br><span class="line">[<span class="string">"city"</span>] = <span class="string">"Beijing"</span> <span class="comment">--索引为字符串</span></span><br><span class="line">&#125; p</span><br><span class="line">rint(corp.web) <span class="comment">--&gt;output:www.google.com</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="string">"telephone"</span>]) <span class="comment">--&gt;output:12345678</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="number">2</span>]) <span class="comment">--&gt;output:100191</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="string">"city"</span>]) <span class="comment">--&gt;output:"Beijing"</span></span><br><span class="line"><span class="built_in">print</span>(corp.staff[<span class="number">1</span>]) <span class="comment">--&gt;output:Jack</span></span><br><span class="line"><span class="built_in">print</span>(corp[<span class="number">10</span>]) <span class="comment">--&gt;output:360</span></span><br></pre></td></tr></table></figure></p><p>在内部实现上，table 通常实现为一个哈希表、一个数组、或者两者的混合。具体的实现为何种形式，动态依赖于具体的 table 的键分布特点。</p><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>在 Lua 中，函数:</p><ol><li>也是一种数据类型,</li><li>函数可以存储在变量中，</li><li>可以通过参数传递给其他函数，</li><li>还可以作为其他函数的返回值</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"in the function"</span>)</span><br><span class="line"><span class="comment">--dosomething()</span></span><br><span class="line"><span class="keyword">local</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> y = <span class="number">20</span></span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> a = foo <span class="comment">--把函数赋给变量</span></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line"><span class="comment">--output:</span></span><br><span class="line"><span class="keyword">in</span> the <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">30</span></span><br></pre></td></tr></table></figure><p>有名函数的定义可以理解为是匿名函数对变量的赋值。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>可以写成如下形式：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>类似地，<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;lua 是一门极其精简的语言，内置类型只要&lt;code&gt;nil&lt;/code&gt;,&lt;code&gt;boolean&lt;/code&gt;,&lt;code&gt;number&lt;/code&gt;等三种基本类型，以及&lt;code&gt;string&lt;/code&gt;,&lt;code&gt;table&lt;/code&gt;等二种组合类型。没有C
      
    
    </summary>
    
      <category term="lua" scheme="http://blog.fanruo.net/categories/lua/"/>
    
    
      <category term="lua" scheme="http://blog.fanruo.net/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>2.1 lua 基本语法</title>
    <link href="http://blog.fanruo.net/2019/05/19/2-1-lua-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://blog.fanruo.net/2019/05/19/2-1-lua-基本语法/</id>
    <published>2019-05-19T15:35:04.000Z</published>
    <updated>2019-05-19T15:35:44.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>C语言之后大多数讲解语言的书籍都会以打印<code>hello world</code>来开始。那么，如何使用lua 打印<code>hello world</code>呢？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p>和python、golang等语言类似，执行这条语句有两种方式：</p><ol><li>交互方式尴尬</li><li>执行lua脚本文件的方式</li></ol><h3 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h3><p>首先，在终端输入<code>lua</code>，进入交互模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[work@fanruo ~]$ lua</span><br><span class="line">Lua 5.1.4  Copyright (C) 1994-2008 Lua.org, PUC-Rio</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>输入<code>lua</code>后会显示一行信息，包括版本、版权信息等，随后是提示符。在提示符后输入<code>print(&quot;hello world&quot;)</code> 回车，就会打印<code>hello world</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> print("hello world")</span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行lua脚本文件方式"><a href="#执行lua脚本文件方式" class="headerlink" title="执行lua脚本文件方式"></a>执行lua脚本文件方式</h3><p>将上述语句保存为<code>hello_world.lua</code>文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/lua</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p>在命令输入如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@fanruo ~]$ lua hello_world.lua</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li><p>单行注释</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line"><span class="comment">--单行注释</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">多</span></span><br><span class="line"><span class="comment">行</span></span><br><span class="line"><span class="comment">注</span></span><br><span class="line"><span class="comment">释</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure></li></ol><p><code>lua</code>的多行注释有点像<code>html</code>的多行注释。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><code>lua</code>的标识符和<code>c/c++</code>等语言类似：</p><ol><li>以下划线（_）和字母（a-zA-Z）开头；</li><li>后续加0个或者多个下划线(_)、字母（a-zA-Z）和数字（0-9）；</li><li>最好不要使用下划线加大写字母的标示符，因为Lua的保留字也是这样的。</li><li>不允许使用特殊字符如 @, $, 和 % 来定义标示符；</li><li>Lua 是一个区分大小写的编程语言。</li></ol><p><strong>注意：</strong>事实上，在编程时，即使使用的语言区分大小写也不建议使用大小写来区分标识符。</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">break</span> <span class="keyword">do</span> <span class="keyword">else</span> <span class="keyword">elseif</span></span><br><span class="line"><span class="keyword">end</span> <span class="literal">false</span> <span class="keyword">for</span> <span class="function"><span class="keyword">function</span> <span class="title">if</span></span></span><br><span class="line"><span class="function"><span class="title">in</span> <span class="title">local</span> <span class="title">nil</span> <span class="title">not</span> <span class="title">or</span></span></span><br><span class="line"><span class="function"><span class="title">repeat</span> <span class="title">return</span> <span class="title">then</span> <span class="title">true</span> <span class="title">until</span></span></span><br><span class="line"><span class="function"><span class="title">while</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;C语言之后大多数讲解语言的书籍都会以打印&lt;code&gt;hello world&lt;/code&gt;来开始。那么，如何使用lua 打印&lt;code&gt;hel
      
    
    </summary>
    
      <category term="lua" scheme="http://blog.fanruo.net/categories/lua/"/>
    
    
      <category term="lua" scheme="http://blog.fanruo.net/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>1.2 lua环境安装</title>
    <link href="http://blog.fanruo.net/2018/09/14/1.2lua%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.fanruo.net/2018/09/14/1.2lua环境安装/</id>
    <published>2018-09-14T12:40:04.000Z</published>
    <updated>2018-09-14T12:46:16.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lua-环境安装"><a href="#lua-环境安装" class="headerlink" title="lua 环境安装"></a>lua 环境安装</h1><h2 id="linux-系统安装lua"><a href="#linux-系统安装lua" class="headerlink" title="linux 系统安装lua"></a>linux 系统安装lua</h2><p>linux &amp; Mac上安装 Lua 安装非常简单，只需要下载源码包并在终端解压编译即可，本文使用了5.3.4版本进行安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.4.tar.gz</span><br><span class="line">tar zxf lua-5.3.4.tar.gz</span><br><span class="line">cd lua-5.3.4</span><br><span class="line">make linux test</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><h2 id="mac-系统安装lua"><a href="#mac-系统安装lua" class="headerlink" title="mac 系统安装lua"></a>mac 系统安装lua</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.4.tar.gz</span><br><span class="line">tar zxf lua-5.3.4.tar.gz</span><br><span class="line">cd lua-5.3.4</span><br><span class="line">make macosx test</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lua-环境安装&quot;&gt;&lt;a href=&quot;#lua-环境安装&quot; class=&quot;headerlink&quot; title=&quot;lua 环境安装&quot;&gt;&lt;/a&gt;lua 环境安装&lt;/h1&gt;&lt;h2 id=&quot;linux-系统安装lua&quot;&gt;&lt;a href=&quot;#linux-系统安装lua&quot; c
      
    
    </summary>
    
      <category term="lua" scheme="http://blog.fanruo.net/categories/lua/"/>
    
    
      <category term="lua" scheme="http://blog.fanruo.net/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>1.1 lua简介</title>
    <link href="http://blog.fanruo.net/2018/09/14/1.1lua%E7%AE%80%E4%BB%8B/"/>
    <id>http://blog.fanruo.net/2018/09/14/1.1lua简介/</id>
    <published>2018-09-14T12:32:38.000Z</published>
    <updated>2018-09-14T12:46:56.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Lua（发音： /ˈluːə/）程序设计语言是一个简洁、轻量、可扩展的脚本语言，Lua在葡萄牙语中的意思是月亮。<br>Lua 是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组，由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo所组成并于1993年开发。</p><p>Lua是一种轻量语言，它的官方版本只包括一个精简的核心和最基本的库。这使得Lua体积小、启动速度快。它用ANSI C 语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。和许多“大而全”的语言不一样，网路通讯、图形界面等都没有默认提供。但是Lua可以很容易地被扩展：由宿主语言（通常是C或C++）提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。事实上，现在已经有很多成熟的扩展模块可供选用。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>Lua的目标是成为一个很容易嵌入其它语言中使用的语言。大多数程序员也认为它的确做到了这一点。</li><li>很多应用程序使用Lua作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li><strong>轻量级：</strong> 它是使用ANSI C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。它的官方版本只包括一个精简的核心和最基本的库。这使得Lua体积小、启动速度快。和许多“大而全”的语言不一样，网路通讯、图形界面等都没有默认提供。但是Lua可以很容易地被扩展：由宿主语言（通常是C或C++）提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。事实上，现在已经有很多成熟的扩展模块可供选用。</li><li><strong>可扩展：</strong> Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。</li><li><strong>支持多重编程范式：</strong> 支持面向过程(procedure-oriented)编程和函数式编程(functional programming)。</li><li><strong>自动内存管理：</strong> 支持增量式垃圾收集策略。</li><li><strong>原生数据类型少：</strong> 它只提供了数字（缺省是双精度浮点数，可配置）、布尔量、字符串、表、子程序、协程（coroutine）以及用户自定义数据这几种。但是其处理表和字符串的效率非常之高，加上元表的支持，开发者可以高效的模拟出需要的复杂数据类型（比如数组，哈希表，集合，对象等）。</li><li><strong>可以用于嵌入式硬件:</strong> 不仅可以嵌入其他编程语言，而且可以嵌入微处理器中.</li><li><strong>支持协程：</strong> 有内建的，与操作系统无关的协作式多线程（coroutine）支持。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li></ol><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p>lua 打印<code>hello workd</code>只需调用<code>print()</code>函数即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Lua（发音： /ˈluːə/）程序设计语言是一个简洁、轻量、可扩展的脚本语言，Lua在葡萄牙语中的意思是月亮。&lt;br&gt;Lua 是巴西里约热
      
    
    </summary>
    
      <category term="lua" scheme="http://blog.fanruo.net/categories/lua/"/>
    
    
      <category term="lua" scheme="http://blog.fanruo.net/tags/lua/"/>
    
  </entry>
  
</feed>
